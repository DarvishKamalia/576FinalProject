package org.wikijava.sound.playWave;
import java.util.ArrayList;


public class KMeans {
	private final static int NUMBER_OF_CLUSTERS = 64;
	private double HValue;
	private static double chiSquare = 0;
	static double[] sums = new double[NUMBER_OF_CLUSTERS];
	static double[] means = new double[NUMBER_OF_CLUSTERS];
	static double[] normalizedMeans1 = new double[NUMBER_OF_CLUSTERS];
	static double[] normalizedMeans2 = new double[NUMBER_OF_CLUSTERS];
	static double[] normalizedMeans3 = new double[NUMBER_OF_CLUSTERS];
	static double[] normalizedMeans4 = new double[NUMBER_OF_CLUSTERS];
	
	static ArrayList<ArrayList<Integer>> clusterNumbersOuter = new ArrayList<ArrayList<Integer>>();
	static ArrayList<Double> clusterValuesInner = new ArrayList<Double>();

	public void setHValue(double h) {
		this.HValue = h;
	}
	 
	public double getHValue() {
		return HValue;
	}

	public static void sort() {
	
		boolean flag = true;
		
		for (int f = 0; f < NUMBER_OF_CLUSTERS; f++ ) {
			//initialize all sums to 0
			sums[f] = 0.0;
			
			//arbitrarily set all means to the first value in each cluster to start
			means[f] = clusterNumbersOuter.get(f).get(0);
			
			//set all 64 clusters with cluster number at index
			clusterNumbersOuter.get(f).get(f+1); 
		}
		
		int countOfChangedValues = 0;
		int movedValue;
		do {
			
			double minimum = Double.POSITIVE_INFINITY;
			for (int i = 0; i < NUMBER_OF_CLUSTERS; i++) {
				for (int m = 0; m < clusterNumbersOuter.get(i).size(); m++) {
					if (Math.abs((clusterNumbersOuter.get(i).get(m) - means[i])) < minimum) {
						//change minimum difference
						minimum = Math.abs(clusterNumbersOuter.get(i).get(m) - means[i]);
						
						//remove value from original cluster
						clusterValuesInner.remove(m);
						//add value to new cluster	
						movedValue = clusterNumbersOuter.get(i).get(m);
						clusterNumbersOuter.get(i).add(movedValue);
						countOfChangedValues++;
					
					} 
						
				}
				
				//recalculate sums
				for (int j = 0;j < countOfChangedValues; j++) {
					for(i = 1; i < clusterNumbersOuter.get(i).get(j); i++) {
						sums[j] += clusterValuesInner.get(i);
					}
				}
				
				//recalculate means
				for (int j = 0; j < means.length; j++) {
					means[j] = sums[j]/clusterValuesInner.get(j);
				}
			}
		} while (flag);
			
	}
	
	public static void divideToFourHistograms() {
		int width = 352;
		int height = 288;
		//top left
		for (int i = 0; i < width/2; i++) {
			for (int j =0; j < height/2; j++) {
				normalizedMeans1[i] = means[i] * calculateEuclidianDistance(means[i], means[j]);
			}
		}
		
		//top right
		
		for (int i =width/2; i < width; i++) {
			for (int j =0; j < height/2; j++) {
				normalizedMeans2[i] = means[i] * calculateEuclidianDistance(means[i], means[j]);
			}
		}
		
		//bottom left
		
		for (int i = 0; i < width/2; i++) {
			for (int j =height/2; j < height; j++) {
				normalizedMeans3[i] = means[i] * calculateEuclidianDistance(means[i], means[j]);
			}
		}
		
		//bottom right
		
		for (int i = width/2; i < width; i++) {
			for (int j =height/2; j < height; j++) {
				normalizedMeans4[i] = means[i] * calculateEuclidianDistance(means[i], means[j]);
			}
		}
		
	}
	
	public static double calculateEuclidianDistance(double h1, double h2) {
		return Math.sqrt(Math.pow(h1-h2, 2));
	}
	
	public static double calculateChiDistance(int queryClusterNumber, int databaseClusterNumber) {
		
		for (int i = 0; i < NUMBER_OF_CLUSTERS; i++) {
			chiSquare = chiSquare + (Math.pow((clusterNumbersOuter.get(queryClusterNumber).get(i)-clusterNumbersOuter.get(databaseClusterNumber).get(i)),
					2))/(clusterNumbersOuter.get(queryClusterNumber).get(i)+clusterNumbersOuter.get(databaseClusterNumber).get(i));
		}
	
		return chiSquare;
	}
	
	
}
